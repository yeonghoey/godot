:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the EditorPlugin.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_EditorPlugin:

EditorPlugin
============

**Inherits:** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Category:** Core

Brief Description
-----------------

Used by the editor to extend its functionality.

Methods
-------

+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_autoload_singleton<class_EditorPlugin_method_add_autoload_singleton>` **(** :ref:`String<class_String>` name, :ref:`String<class_String>` path **)**                                                                         |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ToolButton<class_ToolButton>`                 | :ref:`add_control_to_bottom_panel<class_EditorPlugin_method_add_control_to_bottom_panel>` **(** :ref:`Control<class_Control>` control, :ref:`String<class_String>` title **)**                                                         |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_control_to_container<class_EditorPlugin_method_add_control_to_container>` **(** :ref:`CustomControlContainer<enum_EditorPlugin_CustomControlContainer>` container, :ref:`Control<class_Control>` control **)**               |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_control_to_dock<class_EditorPlugin_method_add_control_to_dock>` **(** :ref:`DockSlot<enum_EditorPlugin_DockSlot>` slot, :ref:`Control<class_Control>` control **)**                                                          |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_custom_type<class_EditorPlugin_method_add_custom_type>` **(** :ref:`String<class_String>` type, :ref:`String<class_String>` base, :ref:`Script<class_Script>` script, :ref:`Texture<class_Texture>` icon **)**               |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_export_plugin<class_EditorPlugin_method_add_export_plugin>` **(** :ref:`EditorExportPlugin<class_EditorExportPlugin>` plugin **)**                                                                                           |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_import_plugin<class_EditorPlugin_method_add_import_plugin>` **(** :ref:`EditorImportPlugin<class_EditorImportPlugin>` importer **)**                                                                                         |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_inspector_plugin<class_EditorPlugin_method_add_inspector_plugin>` **(** :ref:`EditorInspectorPlugin<class_EditorInspectorPlugin>` plugin **)**                                                                               |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_scene_import_plugin<class_EditorPlugin_method_add_scene_import_plugin>` **(** :ref:`EditorSceneImporter<class_EditorSceneImporter>` scene_importer **)**                                                                     |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_spatial_gizmo_plugin<class_EditorPlugin_method_add_spatial_gizmo_plugin>` **(** :ref:`EditorSpatialGizmoPlugin<class_EditorSpatialGizmoPlugin>` plugin **)**                                                                 |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_tool_menu_item<class_EditorPlugin_method_add_tool_menu_item>` **(** :ref:`String<class_String>` name, :ref:`Object<class_Object>` handler, :ref:`String<class_String>` callback, :ref:`Variant<class_Variant>` ud=null **)** |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`add_tool_submenu_item<class_EditorPlugin_method_add_tool_submenu_item>` **(** :ref:`String<class_String>` name, :ref:`Object<class_Object>` submenu **)**                                                                        |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`apply_changes<class_EditorPlugin_method_apply_changes>` **(** **)** virtual                                                                                                                                                      |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`build<class_EditorPlugin_method_build>` **(** **)** virtual                                                                                                                                                                      |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`clear<class_EditorPlugin_method_clear>` **(** **)** virtual                                                                                                                                                                      |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`disable_plugin<class_EditorPlugin_method_disable_plugin>` **(** **)** virtual                                                                                                                                                    |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`edit<class_EditorPlugin_method_edit>` **(** :ref:`Object<class_Object>` object **)** virtual                                                                                                                                     |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`enable_plugin<class_EditorPlugin_method_enable_plugin>` **(** **)** virtual                                                                                                                                                      |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`forward_canvas_draw_over_viewport<class_EditorPlugin_method_forward_canvas_draw_over_viewport>` **(** :ref:`Control<class_Control>` overlay **)** virtual                                                                        |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`forward_canvas_force_draw_over_viewport<class_EditorPlugin_method_forward_canvas_force_draw_over_viewport>` **(** :ref:`Control<class_Control>` overlay **)** virtual                                                            |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`forward_canvas_gui_input<class_EditorPlugin_method_forward_canvas_gui_input>` **(** :ref:`InputEvent<class_InputEvent>` event **)** virtual                                                                                      |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`forward_spatial_gui_input<class_EditorPlugin_method_forward_spatial_gui_input>` **(** :ref:`Camera<class_Camera>` camera, :ref:`InputEvent<class_InputEvent>` event **)** virtual                                                |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PoolStringArray<class_PoolStringArray>`       | :ref:`get_breakpoints<class_EditorPlugin_method_get_breakpoints>` **(** **)** virtual                                                                                                                                                  |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`EditorInterface<class_EditorInterface>`       | :ref:`get_editor_interface<class_EditorPlugin_method_get_editor_interface>` **(** **)**                                                                                                                                                |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_Object>`                         | :ref:`get_plugin_icon<class_EditorPlugin_method_get_plugin_icon>` **(** **)** virtual                                                                                                                                                  |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`                         | :ref:`get_plugin_name<class_EditorPlugin_method_get_plugin_name>` **(** **)** virtual                                                                                                                                                  |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`ScriptCreateDialog<class_ScriptCreateDialog>` | :ref:`get_script_create_dialog<class_EditorPlugin_method_get_script_create_dialog>` **(** **)**                                                                                                                                        |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>`                 | :ref:`get_state<class_EditorPlugin_method_get_state>` **(** **)** virtual                                                                                                                                                              |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`UndoRedo<class_UndoRedo>`                     | :ref:`get_undo_redo<class_EditorPlugin_method_get_undo_redo>` **(** **)**                                                                                                                                                              |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`get_window_layout<class_EditorPlugin_method_get_window_layout>` **(** :ref:`ConfigFile<class_ConfigFile>` layout **)** virtual                                                                                                   |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`handles<class_EditorPlugin_method_handles>` **(** :ref:`Object<class_Object>` object **)** virtual                                                                                                                               |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                             | :ref:`has_main_screen<class_EditorPlugin_method_has_main_screen>` **(** **)** virtual                                                                                                                                                  |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`hide_bottom_panel<class_EditorPlugin_method_hide_bottom_panel>` **(** **)**                                                                                                                                                      |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`make_bottom_panel_item_visible<class_EditorPlugin_method_make_bottom_panel_item_visible>` **(** :ref:`Control<class_Control>` item **)**                                                                                         |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`make_visible<class_EditorPlugin_method_make_visible>` **(** :ref:`bool<class_bool>` visible **)** virtual                                                                                                                        |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`queue_save_layout<class_EditorPlugin_method_queue_save_layout>` **(** **)** const                                                                                                                                                |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_autoload_singleton<class_EditorPlugin_method_remove_autoload_singleton>` **(** :ref:`String<class_String>` name **)**                                                                                                     |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_control_from_bottom_panel<class_EditorPlugin_method_remove_control_from_bottom_panel>` **(** :ref:`Control<class_Control>` control **)**                                                                                  |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_control_from_container<class_EditorPlugin_method_remove_control_from_container>` **(** :ref:`CustomControlContainer<enum_EditorPlugin_CustomControlContainer>` container, :ref:`Control<class_Control>` control **)**     |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_control_from_docks<class_EditorPlugin_method_remove_control_from_docks>` **(** :ref:`Control<class_Control>` control **)**                                                                                                |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_custom_type<class_EditorPlugin_method_remove_custom_type>` **(** :ref:`String<class_String>` type **)**                                                                                                                   |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_export_plugin<class_EditorPlugin_method_remove_export_plugin>` **(** :ref:`EditorExportPlugin<class_EditorExportPlugin>` plugin **)**                                                                                     |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_import_plugin<class_EditorPlugin_method_remove_import_plugin>` **(** :ref:`EditorImportPlugin<class_EditorImportPlugin>` importer **)**                                                                                   |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_inspector_plugin<class_EditorPlugin_method_remove_inspector_plugin>` **(** :ref:`EditorInspectorPlugin<class_EditorInspectorPlugin>` plugin **)**                                                                         |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_scene_import_plugin<class_EditorPlugin_method_remove_scene_import_plugin>` **(** :ref:`EditorSceneImporter<class_EditorSceneImporter>` scene_importer **)**                                                               |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_spatial_gizmo_plugin<class_EditorPlugin_method_remove_spatial_gizmo_plugin>` **(** :ref:`EditorSpatialGizmoPlugin<class_EditorSpatialGizmoPlugin>` plugin **)**                                                           |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`remove_tool_menu_item<class_EditorPlugin_method_remove_tool_menu_item>` **(** :ref:`String<class_String>` name **)**                                                                                                             |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`save_external_data<class_EditorPlugin_method_save_external_data>` **(** **)** virtual                                                                                                                                            |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_force_draw_over_forwarding_enabled<class_EditorPlugin_method_set_force_draw_over_forwarding_enabled>` **(** **)**                                                                                                            |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_input_event_forwarding_always_enabled<class_EditorPlugin_method_set_input_event_forwarding_always_enabled>` **(** **)**                                                                                                      |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_state<class_EditorPlugin_method_set_state>` **(** :ref:`Dictionary<class_Dictionary>` state **)** virtual                                                                                                                    |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                                | :ref:`set_window_layout<class_EditorPlugin_method_set_window_layout>` **(** :ref:`ConfigFile<class_ConfigFile>` layout **)** virtual                                                                                                   |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`update_overlays<class_EditorPlugin_method_update_overlays>` **(** **)** const                                                                                                                                                    |
+-----------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Signals
-------

.. _class_EditorPlugin_signal_main_screen_changed:

- **main_screen_changed** **(** :ref:`String<class_String>` screen_name **)**

Emitted when user changes the workspace (**2D**, **3D**, **Script**, **AssetLib**). Also works with custom screens defined by plugins.

.. _class_EditorPlugin_signal_resource_saved:

- **resource_saved** **(** :ref:`Resource<class_Resource>` resource **)**

.. _class_EditorPlugin_signal_scene_changed:

- **scene_changed** **(** :ref:`Node<class_Node>` scene_root **)**

Emitted when the scene is changed in the editor. The argument will return the root node of the scene that has just become active. If this scene is new and empty, the argument will be ``null``.

.. _class_EditorPlugin_signal_scene_closed:

- **scene_closed** **(** :ref:`String<class_String>` filepath **)**

Emitted when user closes a scene. The argument is file path to a closed scene.

Enumerations
------------

.. _enum_EditorPlugin_CustomControlContainer:

.. _class_EditorPlugin_constant_CONTAINER_TOOLBAR:

.. _class_EditorPlugin_constant_CONTAINER_SPATIAL_EDITOR_MENU:

.. _class_EditorPlugin_constant_CONTAINER_SPATIAL_EDITOR_SIDE_LEFT:

.. _class_EditorPlugin_constant_CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT:

.. _class_EditorPlugin_constant_CONTAINER_SPATIAL_EDITOR_BOTTOM:

.. _class_EditorPlugin_constant_CONTAINER_CANVAS_EDITOR_MENU:

.. _class_EditorPlugin_constant_CONTAINER_CANVAS_EDITOR_SIDE_LEFT:

.. _class_EditorPlugin_constant_CONTAINER_CANVAS_EDITOR_SIDE_RIGHT:

.. _class_EditorPlugin_constant_CONTAINER_CANVAS_EDITOR_BOTTOM:

.. _class_EditorPlugin_constant_CONTAINER_PROPERTY_EDITOR_BOTTOM:

.. _class_EditorPlugin_constant_CONTAINER_PROJECT_SETTING_TAB_LEFT:

.. _class_EditorPlugin_constant_CONTAINER_PROJECT_SETTING_TAB_RIGHT:

enum **CustomControlContainer**:

- **CONTAINER_TOOLBAR** = **0**

- **CONTAINER_SPATIAL_EDITOR_MENU** = **1**

- **CONTAINER_SPATIAL_EDITOR_SIDE_LEFT** = **2**

- **CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT** = **3**

- **CONTAINER_SPATIAL_EDITOR_BOTTOM** = **4**

- **CONTAINER_CANVAS_EDITOR_MENU** = **5**

- **CONTAINER_CANVAS_EDITOR_SIDE_LEFT** = **6**

- **CONTAINER_CANVAS_EDITOR_SIDE_RIGHT** = **7**

- **CONTAINER_CANVAS_EDITOR_BOTTOM** = **8**

- **CONTAINER_PROPERTY_EDITOR_BOTTOM** = **9**

- **CONTAINER_PROJECT_SETTING_TAB_LEFT** = **10**

- **CONTAINER_PROJECT_SETTING_TAB_RIGHT** = **11**

.. _enum_EditorPlugin_DockSlot:

.. _class_EditorPlugin_constant_DOCK_SLOT_LEFT_UL:

.. _class_EditorPlugin_constant_DOCK_SLOT_LEFT_BL:

.. _class_EditorPlugin_constant_DOCK_SLOT_LEFT_UR:

.. _class_EditorPlugin_constant_DOCK_SLOT_LEFT_BR:

.. _class_EditorPlugin_constant_DOCK_SLOT_RIGHT_UL:

.. _class_EditorPlugin_constant_DOCK_SLOT_RIGHT_BL:

.. _class_EditorPlugin_constant_DOCK_SLOT_RIGHT_UR:

.. _class_EditorPlugin_constant_DOCK_SLOT_RIGHT_BR:

.. _class_EditorPlugin_constant_DOCK_SLOT_MAX:

enum **DockSlot**:

- **DOCK_SLOT_LEFT_UL** = **0**

- **DOCK_SLOT_LEFT_BL** = **1**

- **DOCK_SLOT_LEFT_UR** = **2**

- **DOCK_SLOT_LEFT_BR** = **3**

- **DOCK_SLOT_RIGHT_UL** = **4**

- **DOCK_SLOT_RIGHT_BL** = **5**

- **DOCK_SLOT_RIGHT_UR** = **6**

- **DOCK_SLOT_RIGHT_BR** = **7**

- **DOCK_SLOT_MAX** = **8** --- Represents the size of the :ref:`DockSlot<enum_EditorPlugin_DockSlot>` enum.

Description
-----------

Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins. See also :ref:`EditorScript<class_EditorScript>` to add functions to the editor.

Tutorials
---------

- :doc:`../tutorials/plugins/editor/index`

Method Descriptions
-------------------

.. _class_EditorPlugin_method_add_autoload_singleton:

- void **add_autoload_singleton** **(** :ref:`String<class_String>` name, :ref:`String<class_String>` path **)**

Adds a script at ``path`` to the Autoload list as ``name``.

.. _class_EditorPlugin_method_add_control_to_bottom_panel:

- :ref:`ToolButton<class_ToolButton>` **add_control_to_bottom_panel** **(** :ref:`Control<class_Control>` control, :ref:`String<class_String>` title **)**

Adds a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. When your plugin is deactivated, make sure to remove your custom control with :ref:`remove_control_from_bottom_panel<class_EditorPlugin_method_remove_control_from_bottom_panel>` and free it with :ref:`Node.queue_free<class_Node_method_queue_free>`.

.. _class_EditorPlugin_method_add_control_to_container:

- void **add_control_to_container** **(** :ref:`CustomControlContainer<enum_EditorPlugin_CustomControlContainer>` container, :ref:`Control<class_Control>` control **)**

Adds a custom control to a container (see :ref:`CustomControlContainer<enum_EditorPlugin_CustomControlContainer>`). There are many locations where custom controls can be added in the editor UI.

Please remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).

When your plugin is deactivated, make sure to remove your custom control with :ref:`remove_control_from_container<class_EditorPlugin_method_remove_control_from_container>` and free it with :ref:`Node.queue_free<class_Node_method_queue_free>`.

.. _class_EditorPlugin_method_add_control_to_dock:

- void **add_control_to_dock** **(** :ref:`DockSlot<enum_EditorPlugin_DockSlot>` slot, :ref:`Control<class_Control>` control **)**

Adds the control to a specific dock slot (see :ref:`DockSlot<enum_EditorPlugin_DockSlot>` for options).

If the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.

When your plugin is deactivated, make sure to remove your custom control with :ref:`remove_control_from_docks<class_EditorPlugin_method_remove_control_from_docks>` and free it with :ref:`Node.queue_free<class_Node_method_queue_free>`.

.. _class_EditorPlugin_method_add_custom_type:

- void **add_custom_type** **(** :ref:`String<class_String>` type, :ref:`String<class_String>` base, :ref:`Script<class_Script>` script, :ref:`Texture<class_Texture>` icon **)**

Adds a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed.

When given node or resource is selected, the base type will be instanced (ie, "Spatial", "Control", "Resource"), then the script will be loaded and set to this object.

You can use the virtual method :ref:`handles<class_EditorPlugin_method_handles>` to check if your custom object is being edited by checking the script or using the ``is`` keyword.

During run-time, this will be a simple object with a script so this function does not need to be called then.

.. _class_EditorPlugin_method_add_export_plugin:

- void **add_export_plugin** **(** :ref:`EditorExportPlugin<class_EditorExportPlugin>` plugin **)**

.. _class_EditorPlugin_method_add_import_plugin:

- void **add_import_plugin** **(** :ref:`EditorImportPlugin<class_EditorImportPlugin>` importer **)**

.. _class_EditorPlugin_method_add_inspector_plugin:

- void **add_inspector_plugin** **(** :ref:`EditorInspectorPlugin<class_EditorInspectorPlugin>` plugin **)**

.. _class_EditorPlugin_method_add_scene_import_plugin:

- void **add_scene_import_plugin** **(** :ref:`EditorSceneImporter<class_EditorSceneImporter>` scene_importer **)**

.. _class_EditorPlugin_method_add_spatial_gizmo_plugin:

- void **add_spatial_gizmo_plugin** **(** :ref:`EditorSpatialGizmoPlugin<class_EditorSpatialGizmoPlugin>` plugin **)**

.. _class_EditorPlugin_method_add_tool_menu_item:

- void **add_tool_menu_item** **(** :ref:`String<class_String>` name, :ref:`Object<class_Object>` handler, :ref:`String<class_String>` callback, :ref:`Variant<class_Variant>` ud=null **)**

Adds a custom menu item to **Project > Tools** as ``name`` that calls ``callback`` on an instance of ``handler`` with a parameter ``ud`` when user activates it.

.. _class_EditorPlugin_method_add_tool_submenu_item:

- void **add_tool_submenu_item** **(** :ref:`String<class_String>` name, :ref:`Object<class_Object>` submenu **)**

Adds a custom submenu under **Project > Tools >** ``name``. ``submenu`` should be an object of class :ref:`PopupMenu<class_PopupMenu>`. This submenu should be cleaned up using ``remove_tool_menu_item(name)``.

.. _class_EditorPlugin_method_apply_changes:

- void **apply_changes** **(** **)** virtual

This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.

This is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.

.. _class_EditorPlugin_method_build:

- :ref:`bool<class_bool>` **build** **(** **)** virtual

.. _class_EditorPlugin_method_clear:

- void **clear** **(** **)** virtual

Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.

.. _class_EditorPlugin_method_disable_plugin:

- void **disable_plugin** **(** **)** virtual

Called by the engine when the user disables the ``EditorPlugin`` in the Plugin tab of the project settings window.

.. _class_EditorPlugin_method_edit:

- void **edit** **(** :ref:`Object<class_Object>` object **)** virtual

This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.

.. _class_EditorPlugin_method_enable_plugin:

- void **enable_plugin** **(** **)** virtual

Called by the engine when the user enables the ``EditorPlugin`` in the Plugin tab of the project settings window.

.. _class_EditorPlugin_method_forward_canvas_draw_over_viewport:

- void **forward_canvas_draw_over_viewport** **(** :ref:`Control<class_Control>` overlay **)** virtual

.. _class_EditorPlugin_method_forward_canvas_force_draw_over_viewport:

- void **forward_canvas_force_draw_over_viewport** **(** :ref:`Control<class_Control>` overlay **)** virtual

.. _class_EditorPlugin_method_forward_canvas_gui_input:

- :ref:`bool<class_bool>` **forward_canvas_gui_input** **(** :ref:`InputEvent<class_InputEvent>` event **)** virtual

Called when there is a root node in the current edited scene, :ref:`handles<class_EditorPlugin_method_handles>` is implemented and an :ref:`InputEvent<class_InputEvent>` happens in the 2D viewport. Intercepts the :ref:`InputEvent<class_InputEvent>`, if ``return true`` ``EditorPlugin`` consumes the ``event``, otherwise forwards ``event`` to other Editor classes. Example:

::

    # Prevents the InputEvent to reach other Editor classes
    func forward_canvas_gui_input(event):
        var forward = true
        return forward

Must ``return false`` in order to forward the :ref:`InputEvent<class_InputEvent>` to other Editor classes. Example:

::

    # Consumes InputEventMouseMotion and forwards other InputEvent types
    func forward_canvas_gui_input(event):
        var forward = false
        if event is InputEventMouseMotion:
            forward = true
        return forward

.. _class_EditorPlugin_method_forward_spatial_gui_input:

- :ref:`bool<class_bool>` **forward_spatial_gui_input** **(** :ref:`Camera<class_Camera>` camera, :ref:`InputEvent<class_InputEvent>` event **)** virtual

Called when there is a root node in the current edited scene, :ref:`handles<class_EditorPlugin_method_handles>` is implemented and an :ref:`InputEvent<class_InputEvent>` happens in the 3D viewport. Intercepts the :ref:`InputEvent<class_InputEvent>`, if ``return true`` ``EditorPlugin`` consumes the ``event``, otherwise forwards ``event`` to other Editor classes. Example:

::

    # Prevents the InputEvent to reach other Editor classes
    func forward_spatial_gui_input(camera, event):
        var forward = true
        return forward

Must ``return false`` in order to forward the :ref:`InputEvent<class_InputEvent>` to other Editor classes. Example:

::

    # Consumes InputEventMouseMotion and forwards other InputEvent types
    func forward_spatial_gui_input(camera, event):
        var forward = false
        if event is InputEventMouseMotion:
            forward = true
        return forward

.. _class_EditorPlugin_method_get_breakpoints:

- :ref:`PoolStringArray<class_PoolStringArray>` **get_breakpoints** **(** **)** virtual

This is for editors that edit script-based objects. You can return a list of breakpoints in the format (``script:line``), for example: ``res://path_to_script.gd:25``.

.. _class_EditorPlugin_method_get_editor_interface:

- :ref:`EditorInterface<class_EditorInterface>` **get_editor_interface** **(** **)**

Returns the :ref:`EditorInterface<class_EditorInterface>` object that gives you control over Godot editor's window and its functionalities.

.. _class_EditorPlugin_method_get_plugin_icon:

- :ref:`Object<class_Object>` **get_plugin_icon** **(** **)** virtual

.. _class_EditorPlugin_method_get_plugin_name:

- :ref:`String<class_String>` **get_plugin_name** **(** **)** virtual

.. _class_EditorPlugin_method_get_script_create_dialog:

- :ref:`ScriptCreateDialog<class_ScriptCreateDialog>` **get_script_create_dialog** **(** **)**

Gets the Editor's dialogue used for making scripts.

**Note:** Users can configure it before use.

.. _class_EditorPlugin_method_get_state:

- :ref:`Dictionary<class_Dictionary>` **get_state** **(** **)** virtual

Gets the state of your plugin editor. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns).

.. _class_EditorPlugin_method_get_undo_redo:

- :ref:`UndoRedo<class_UndoRedo>` **get_undo_redo** **(** **)**

Gets the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.

.. _class_EditorPlugin_method_get_window_layout:

- void **get_window_layout** **(** :ref:`ConfigFile<class_ConfigFile>` layout **)** virtual

Gets the GUI layout of the plugin. This is used to save the project's editor layout when :ref:`queue_save_layout<class_EditorPlugin_method_queue_save_layout>` is called or the editor layout was changed(For example changing the position of a dock).

.. _class_EditorPlugin_method_handles:

- :ref:`bool<class_bool>` **handles** **(** :ref:`Object<class_Object>` object **)** virtual

Implement this function if your plugin edits a specific type of object (Resource or Node). If you return ``true``, then you will get the functions :ref:`edit<class_EditorPlugin_method_edit>` and :ref:`make_visible<class_EditorPlugin_method_make_visible>` called when the editor requests them. If you have declared the methods :ref:`forward_canvas_gui_input<class_EditorPlugin_method_forward_canvas_gui_input>` and :ref:`forward_spatial_gui_input<class_EditorPlugin_method_forward_spatial_gui_input>` these will be called too.

.. _class_EditorPlugin_method_has_main_screen:

- :ref:`bool<class_bool>` **has_main_screen** **(** **)** virtual

Returns ``true`` if this is a main screen editor plugin (it goes in the workspace selector together with **2D**, **3D**, **Script** and **AssetLib**).

.. _class_EditorPlugin_method_hide_bottom_panel:

- void **hide_bottom_panel** **(** **)**

.. _class_EditorPlugin_method_make_bottom_panel_item_visible:

- void **make_bottom_panel_item_visible** **(** :ref:`Control<class_Control>` item **)**

.. _class_EditorPlugin_method_make_visible:

- void **make_visible** **(** :ref:`bool<class_bool>` visible **)** virtual

This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.

Remember that you have to manage the visibility of all your editor controls manually.

.. _class_EditorPlugin_method_queue_save_layout:

- void **queue_save_layout** **(** **)** const

Queue save the project's editor layout.

.. _class_EditorPlugin_method_remove_autoload_singleton:

- void **remove_autoload_singleton** **(** :ref:`String<class_String>` name **)**

Removes an Autoload ``name`` from the list.

.. _class_EditorPlugin_method_remove_control_from_bottom_panel:

- void **remove_control_from_bottom_panel** **(** :ref:`Control<class_Control>` control **)**

Removes the control from the bottom panel. You have to manually :ref:`Node.queue_free<class_Node_method_queue_free>` the control.

.. _class_EditorPlugin_method_remove_control_from_container:

- void **remove_control_from_container** **(** :ref:`CustomControlContainer<enum_EditorPlugin_CustomControlContainer>` container, :ref:`Control<class_Control>` control **)**

Removes the control from the specified container. You have to manually :ref:`Node.queue_free<class_Node_method_queue_free>` the control.

.. _class_EditorPlugin_method_remove_control_from_docks:

- void **remove_control_from_docks** **(** :ref:`Control<class_Control>` control **)**

Removes the control from the dock. You have to manually :ref:`Node.queue_free<class_Node_method_queue_free>` the control.

.. _class_EditorPlugin_method_remove_custom_type:

- void **remove_custom_type** **(** :ref:`String<class_String>` type **)**

Removes a custom type added by :ref:`add_custom_type<class_EditorPlugin_method_add_custom_type>`.

.. _class_EditorPlugin_method_remove_export_plugin:

- void **remove_export_plugin** **(** :ref:`EditorExportPlugin<class_EditorExportPlugin>` plugin **)**

.. _class_EditorPlugin_method_remove_import_plugin:

- void **remove_import_plugin** **(** :ref:`EditorImportPlugin<class_EditorImportPlugin>` importer **)**

.. _class_EditorPlugin_method_remove_inspector_plugin:

- void **remove_inspector_plugin** **(** :ref:`EditorInspectorPlugin<class_EditorInspectorPlugin>` plugin **)**

.. _class_EditorPlugin_method_remove_scene_import_plugin:

- void **remove_scene_import_plugin** **(** :ref:`EditorSceneImporter<class_EditorSceneImporter>` scene_importer **)**

.. _class_EditorPlugin_method_remove_spatial_gizmo_plugin:

- void **remove_spatial_gizmo_plugin** **(** :ref:`EditorSpatialGizmoPlugin<class_EditorSpatialGizmoPlugin>` plugin **)**

.. _class_EditorPlugin_method_remove_tool_menu_item:

- void **remove_tool_menu_item** **(** :ref:`String<class_String>` name **)**

Removes a menu ``name`` from **Project > Tools**.

.. _class_EditorPlugin_method_save_external_data:

- void **save_external_data** **(** **)** virtual

This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.

.. _class_EditorPlugin_method_set_force_draw_over_forwarding_enabled:

- void **set_force_draw_over_forwarding_enabled** **(** **)**

.. _class_EditorPlugin_method_set_input_event_forwarding_always_enabled:

- void **set_input_event_forwarding_always_enabled** **(** **)**

Use this method if you always want to receive inputs from 3D view screen inside :ref:`forward_spatial_gui_input<class_EditorPlugin_method_forward_spatial_gui_input>`. It might be especially usable if your plugin will want to use raycast in the scene.

.. _class_EditorPlugin_method_set_state:

- void **set_state** **(** :ref:`Dictionary<class_Dictionary>` state **)** virtual

Restore the state saved by :ref:`get_state<class_EditorPlugin_method_get_state>`.

.. _class_EditorPlugin_method_set_window_layout:

- void **set_window_layout** **(** :ref:`ConfigFile<class_ConfigFile>` layout **)** virtual

Restore the plugin GUI layout saved by :ref:`get_window_layout<class_EditorPlugin_method_get_window_layout>`.

.. _class_EditorPlugin_method_update_overlays:

- :ref:`int<class_int>` **update_overlays** **(** **)** const

Updates the overlays of the editor (2D/3D) viewport.

