:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the JSONParseResult.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_JSONParseResult:

JSONParseResult
===============

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Category:** Core

Brief Description
-----------------

Data class wrapper for decoded JSON.

Properties
----------

+---------------------------------------+------------------------------------------------------------------+----+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`error<class_JSONParseResult_property_error>`               |    |
+---------------------------------------+------------------------------------------------------------------+----+
| :ref:`int<class_int>`                 | :ref:`error_line<class_JSONParseResult_property_error_line>`     | -1 |
+---------------------------------------+------------------------------------------------------------------+----+
| :ref:`String<class_String>`           | :ref:`error_string<class_JSONParseResult_property_error_string>` | "" |
+---------------------------------------+------------------------------------------------------------------+----+
| :ref:`Variant<class_Variant>`         | :ref:`result<class_JSONParseResult_property_result>`             |    |
+---------------------------------------+------------------------------------------------------------------+----+

Description
-----------

Returned by :ref:`JSON.parse<class_JSON_method_parse>`, ``JSONParseResult`` contains the decoded JSON or error information if the JSON source wasn't successfully parsed. You can check if the JSON source was successfully parsed with ``if json_result.error == OK``.

Property Descriptions
---------------------

.. _class_JSONParseResult_property_error:

- :ref:`Error<enum_@GlobalScope_Error>` **error**

+----------+------------------+
| *Setter* | set_error(value) |
+----------+------------------+
| *Getter* | get_error()      |
+----------+------------------+

The error type if the JSON source was not successfully parsed. See the :ref:`@GlobalScope<class_@GlobalScope>` ``ERR_*`` constants.

.. _class_JSONParseResult_property_error_line:

- :ref:`int<class_int>` **error_line**

+-----------+-----------------------+
| *Default* | -1                    |
+-----------+-----------------------+
| *Setter*  | set_error_line(value) |
+-----------+-----------------------+
| *Getter*  | get_error_line()      |
+-----------+-----------------------+

The line number where the error occurred if JSON source was not successfully parsed.

.. _class_JSONParseResult_property_error_string:

- :ref:`String<class_String>` **error_string**

+-----------+-------------------------+
| *Default* | ""                      |
+-----------+-------------------------+
| *Setter*  | set_error_string(value) |
+-----------+-------------------------+
| *Getter*  | get_error_string()      |
+-----------+-------------------------+

The error message if JSON source was not successfully parsed. See the :ref:`@GlobalScope<class_@GlobalScope>` ``ERR_*`` constants.

.. _class_JSONParseResult_property_result:

- :ref:`Variant<class_Variant>` **result**

+----------+-------------------+
| *Setter* | set_result(value) |
+----------+-------------------+
| *Getter* | get_result()      |
+----------+-------------------+

A :ref:`Variant<class_Variant>` containing the parsed JSON. Use :ref:`@GDScript.typeof<class_@GDScript_method_typeof>` or the ``is`` keyword to check if it is what you expect. For example, if the JSON source starts with curly braces (``{}``), a :ref:`Dictionary<class_Dictionary>` will be returned. If the JSON source starts with braces (``[]``), an :ref:`Array<class_Array>` will be returned.

**Note:** The JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to float types.

**Note:** JSON objects do not preserve key order like Godot dictionaries, thus, you should not rely on keys being in a certain order if a dictionary is constructed from JSON. In contrast, JSON arrays retain the order of their elements:

::

    var p = JSON.parse('["hello", "world", "!"]')
    if typeof(p.result) == TYPE_ARRAY:
        print(p.result[0]) # Prints "hello"
    else:
        print("unexpected results")

